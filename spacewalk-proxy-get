#!/usr/bin/python                                                                                                                                                                                                     
"""
script to force fetching all rpms within a given channel to a specific directory on the spacewalk/rhn-proxy that will serve first clients, regardless of squid
"""

#
# Copyright Red Hat, Inc. 2002-2004, 2013
#                                        
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the  
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING. If not, write to the
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
# MA 02139, USA.

from urllib2 import urlopen
import getpass
import optparse
import os
import sys
import xmlrpclib
import optparse

__author__ = "Karim Boumedhel"
__credits__ = ["Karim Boumedhel"]
__license__ = "GPL"
__version__ = "0.2"
__maintainer__ = "Karim Boumedhel"
__email__ = "karim@redhat.com"
__status__ = "Production"

usage="script to force fetching all rpms within a given channel to a specific directory on the spacewalk/rhn-proxy that will serve first clients, regardless of squid"
version="0.2"
parser = optparse.OptionParser("Usage: %prog [options]",version=version)
parser.add_option("-u", "--user", dest="user", type="string", help="User to connect to satellite")
parser.add_option("-p", "--password", dest="password", type="string", help="Password to connect to satellite")
parser.add_option("-C", "--channel", dest="channel", type="string", help="Channel to parse")
parser.add_option("-E", "--env", dest="env", action="store_true", help="Keep environment variables, http_proxy for instance")
parser.add_option("-H", "--host", dest="host", type="string", help="Satellite hostname or ip")
parser.add_option("-P", "--package" , dest="package", type="string", help="Package to retrieve")
parser.add_option("-R", "--root", dest="root", default="/var/spool",type="string", help="Root path to populate.A rhn-proxy/rhn subdirectory will be created there.Defaults to /var/spool as expected by spacewalk/rhn-proxy")
parser.add_option("-S", "--ssl", dest="ssl", action="store_true", help="Use SSL")
parser.add_option("-W", "--wget", dest="wget", action="store_true", help="Use wget to retrieve packages")
parser.add_option("-V", "--verify", dest="verify", action="store_true", default=False, help="Check the existing package")
parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Turns up the verbosity")

(options, args) = parser.parse_args()
channel=options.channel
package=options.package
env=options.env
host=options.host
ssl=options.ssl
user=options.user
password=options.password
root=options.root
wget=options.wget
verify=options.verify
verbose=options.verbose

if not host:host=raw_input("Enter Satellite hostname or ip:")
if host=="":
 print "Host cant be blank"
 sys.exit(1)
if not user:user=raw_input("Enter user:")
if user=="":
 print "User cant be blank"
 sys.exit(1)
if not password:password=getpass.getpass("Enter Password:")
if password=="":
 print "Password cant be blank"
 sys.exit(1)
if not channel:channel=raw_input("Enter channel:")
if channel=="":
 print "Channel cant be blank"
 sys.exit(1)

saturl="http://%s/rpc/api" % host
if ssl:saturl="https://%s/rpc/api" % host
sat=xmlrpclib.Server(saturl, verbose=0)
key=sat.auth.login(user,password)

#be sure we dont use squid proxy, as we would potentially cache there
if not env and os.environ.has_key("http-proxy"):del os.environ["http-proxy"]

#create base structure if not there
try:
 os.chdir( root )
 if not os.path.exists("rhn-proxy"):os.makedirs("rhn-proxy")
 os.chdir("rhn-proxy")
 if not os.path.exists("rhn"):os.makedirs("rhn")
 os.chdir("rhn")
except:
 print "Couldnt create root directory...Run as root?"
 os._exit(1)

#check channel exists or dont do anything
try:
 packages=sat.channel.software.listAllPackages(key,channel)
except:
 print "Channel %s not found..." % channel
 os._exit(1)

for pack in packages:
 os.chdir("%s/rhn-proxy/rhn" % root )
 name=pack["name"]
 release=pack["release"]
 version=pack["version"]
 versionrelease="%s-%s" % (version,release)
 id=pack["id"]
 arch=pack["arch_label"]
 completename="%s-%s.%s.rpm" %(name,versionrelease,arch)
 if package and package.upper()!=name.upper():continue
 if not os.path.exists(name):os.makedirs(name)
 os.chdir(name)
 if not os.path.exists(versionrelease):os.makedirs(versionrelease)
 os.chdir(versionrelease)
 if not os.path.exists(arch):os.makedirs(arch)
 os.chdir(arch)
 if verify and os.path.exists(completename):
  packagesize=sat.packages.getDetails(key,id)["size"]
  if str(os.path.getsize(completename)) != packagesize:
   print "ERROR with %s" % (completename)
   os.remove(completename)
  continue
 if not os.path.exists(completename) and not verify:
  print "Retrieving %s..." % completename
  packageurl=sat.packages.getPackageUrl(key,id)
  packagesize=sat.packages.getDetails(key,id)["size"]
  if verbose:
   print "package id : "+str(id)
   print "url: "+packageurl
   print "size: "+str(packagesize)
  if wget:
   os.system("wget %s" % packageurl)
  else:
   try:
    ori=urlopen(packageurl)
    dest=open(completename, "w")
    dest.write(ori.read())
    dest.close()
    downloadedsize=str(os.path.getsize(completename))
    if downloadedsize!=packagesize:
     print "Failure retrieving %s" % completename
     os.remove(completename)
   except HTTPError, e:
    print "HTTP Error:",e.code , packageurl
   except URLError, e:
    print "URL Error:",e.reason , packageurl
   except :
    print "Unexpected error while downloading %s" % packageurl
    raise
 else:
  print "%s allready there" % completename

sys.exit(0)
